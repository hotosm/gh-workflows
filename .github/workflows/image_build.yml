name: Container Image Build

on:
  workflow_call:
    inputs:
      image_name:
        description: "Name of image, without tags. Not required if image_tags specified."
        required: false
        type: string
      image_tags:
        description: "Default=the images are automatically tagged. Override tags with space separated list."
        required: false
        type: string
        default: ""
      extra_build_args:
        description: "Space separated list of extra build args to use for the image."
        required: false
        type: string
      registry:
        description: "Override GHCR to use an external reg."
        required: false
        type: string
        default: "ghcr.io"
      context:
        description: "Root directory to start the build from."
        required: false
        type: string
        default: "."
      dockerfile:
        description: "Name of dockerfile, relative to context dir."
        required: false
        type: string
        default: "Dockerfile"
      build_target:
        description: "The target to built to (default to end of the Dockerfile)."
        required: false
        type: string
        default: ""
      push:
        description: "Override prevent pushing the image."
        required: false
        type: boolean
        default: true
      cache:
        description: "Use GHCR caching. Default true. Set this false if registry is not ghcr.io."
        required: false
        type: boolean
        default: true
      multi_arch:
        description: "Build a multi-arch image for AMD64/ARM64."
        required: false
        type: boolean
        default: false
      scan_dockerfile:
        description: "Enable dockerfile vulnerability scanning, prior to build."
        required: false
        type: boolean
        default: true
      scan_image:
        description: "Enable image vulnerability scan, after build."
        required: false
        type: boolean
        default: true
    outputs:
      image_name:
        description: "The final full image reference."
        value: ${{ jobs.build-image.outputs.image_name }}
      image_tag:
        description: "The final image tag."
        value: ${{ jobs.build-image.outputs.image_tag }}

jobs:
  build-image:
    runs-on: ubuntu-latest

    environment:
      name: ${{ github.ref_name }}

    outputs:
      image_name: ${{ steps.get_image_name.outputs.image_name }}
      image_tag: ${{ steps.get_image_name.outputs.image_tag }}

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - id: vars_and_secrets
        name: Vars and Secrets to Env
        env:
          VARS_CONTEXT: ${{ toJson(vars) }}
          SECRETS_CONTEXT: ${{ toJson(secrets) }}
        run: |
          # Random delimeter string for security
          delim=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)

          # Func to check if json empty
          is_empty_json() { [[ -z "$1" || "$1" = '{}' ]]; }

          # Func to parse JSON with multiline strings, using delimeter (Github specific)
          to_envs() { jq -r "to_entries[] | \"\(.key)<<$delim\n\(.value)\n$delim\n\""; }

          # Set values to GITHUB_ENV, if present
          if is_empty_json "${VARS_CONTEXT}"; then
            echo "${VARS_CONTEXT}" | to_envs >> $GITHUB_ENV
          fi

          # Set values to GITHUB_ENV, if present
          if is_empty_json "${SECRETS_CONTEXT}"; then
            echo "${SECRETS_CONTEXT}" | to_envs >> $GITHUB_ENV
          fi

      - name: Dockerfile Vulnerabilities
        if: ${{ inputs.scan_dockerfile }}
        uses: bridgecrewio/checkov-action@v12.1347.0
        with:
          file: ${{ inputs.context }}/${{ inputs.dockerfile }} # only run on file
          dockerfile_path: ${{ inputs.context }}/${{ inputs.dockerfile }}
          quiet: true # show only failed checks
          skip_check: CKV_DOCKER_8,CKV_DOCKER_2,CKV_DOCKER_3,CKV_DOCKER_5
          # Skip mandatory user creation, allow ROOT usage

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ inputs.registry }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Image Tags
        if: ${{ inputs.image_tags == '' }}
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ inputs.image_name }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Set up QEMU
        if: ${{ inputs.multi_arch }}
        uses: docker/setup-qemu-action@v3

      - name: Setup Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Container Image
        id: container-build
        uses: docker/build-push-action@v5
        with:
          context: ${{ inputs.context }}
          file: ${{ inputs.context }}/${{ inputs.dockerfile }}
          target: ${{ inputs.build_target }}
          push: ${{ inputs.push }}
          tags: ${{ inputs.image_tags || steps.meta.outputs.tags }}
          # TODO fix to allow passing all env vars and secrets (currently hardcoded)
          # vars_and_secrets correctly loads to `env.` context, but
          # passing into build-args doesn't work
          build-args: |
            APP_VERSION=${{ github.ref_name }}
            COMMIT_REF=${{ github.sha }}
            VITE_API_URL=${{ vars.VITE_API_URL }}
            NODE_ENV=${{ vars.NODE_ENV }}
            ${{ inputs.extra_build_args }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: ${{ inputs.cache == 'true' && 'type=gha' || '' }}
          cache-to: ${{ inputs.cache == 'true' && 'type=gha,mode=max' || '' }}
          # Build for AMD and ARM (requires buildx+qemu)
          platforms: ${{ inputs.multi_arch && 'linux/amd64,linux/arm64' || 'linux/amd64' }}

      - id: get_image_name
        name: Get First Image Name
        run: |
          image_names=${{ fromJSON(steps.container-build.outputs.metadata)['image.name'] }}
          IFS=',' read -ra images_array <<< "$image_names"

          first_image=${images_array[0]}
          echo "Image Name: ${first_image}"
          echo "image_name=${first_image}" >> $GITHUB_OUTPUT

          # Extract the tag (the part after the last colon)
          image_tag="${first_image##*:}"
          echo "image_tag=${image_tag}" >> $GITHUB_OUTPUT
          echo "Image Tag: $image_tag"

  scan-image:
    needs: [build-image]
    runs-on: ubuntu-latest
    if: ${{ inputs.scan_image }}

    steps:
      - name: Scan Container Image
        uses: aquasecurity/trivy-action@0.14.0
        with:
          image-ref: ${{ needs.build-image.outputs.image_name }}
          format: "table"
          exit-code: "1"
          ignore-unfixed: true
          vuln-type: "os,library"
          severity: "CRITICAL"
